{
  "openapi": "3.0.1",
  "info": {
    "title": "MuseTrip360 API",
    "version": "v1"
  },
  "paths": {
    "/api/v1/ai/chat": {
      "post": {
        "tags": ["Ai"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatReq"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatReq"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChatReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/ai/embedding": {
      "post": {
        "tags": ["Ai"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatReq"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatReq"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChatReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/analytics/overview/{museumId}": {
      "get": {
        "tags": ["Analytics"],
        "parameters": [
          {
            "name": "museumId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/analytics/admin/overview": {
      "get": {
        "tags": ["Analytics"],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/articles": {
      "get": {
        "tags": ["Article"],
        "summary": "Get a paginated list of published articles",
        "parameters": [
          {
            "name": "MuseumId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of articles"
          }
        }
      },
      "post": {
        "tags": ["Article"],
        "summary": "Create a new article",
        "requestBody": {
          "description": "Article creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArticleCreateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ArticleCreateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ArticleCreateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Article created successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          }
        }
      }
    },
    "/api/v1/articles/admin": {
      "get": {
        "tags": ["Article"],
        "summary": "Get a paginated list of all articles for admin purposes",
        "parameters": [
          {
            "name": "MuseumId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Status",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ArticleStatusEnum"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of articles"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          }
        }
      }
    },
    "/api/v1/articles/{id}": {
      "get": {
        "tags": ["Article"],
        "summary": "Get a specific article by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The article ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the article"
          },
          "404": {
            "description": "Article not found"
          },
          "401": {
            "description": "Unauthorized - Authentication required for non-published articles"
          }
        }
      },
      "put": {
        "tags": ["Article"],
        "summary": "Update an existing article",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The article ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Article update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArticleUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ArticleUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ArticleUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Article updated successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "404": {
            "description": "Article not found"
          }
        }
      },
      "delete": {
        "tags": ["Article"],
        "summary": "Delete an article",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The article ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Article deleted successfully"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "404": {
            "description": "Article not found"
          }
        }
      }
    },
    "/api/v1/artifacts": {
      "get": {
        "tags": ["Artifact"],
        "summary": "Get a paginated list of active artifacts",
        "parameters": [
          {
            "name": "Search",
            "in": "query",
            "schema": {
              "maxLength": 100,
              "type": "string"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of artifacts"
          }
        }
      }
    },
    "/api/v1/artifacts/admin": {
      "get": {
        "tags": ["Artifact"],
        "summary": "Get a paginated list of all artifacts (including inactive) for admin purposes",
        "parameters": [
          {
            "name": "IsActive",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Search",
            "in": "query",
            "schema": {
              "maxLength": 100,
              "type": "string"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of artifacts"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have admin privileges"
          }
        }
      }
    },
    "/api/v1/artifacts/{id}": {
      "get": {
        "tags": ["Artifact"],
        "summary": "Get an artifact by its unique identifier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the artifact",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested artifact"
          },
          "404": {
            "description": "Artifact not found"
          }
        }
      },
      "put": {
        "tags": ["Artifact"],
        "summary": "Update an existing artifact",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the artifact to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated artifact data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArtifactUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ArtifactUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ArtifactUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated artifact"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have required privileges"
          },
          "404": {
            "description": "Artifact not found"
          }
        }
      },
      "delete": {
        "tags": ["Artifact"],
        "summary": "Delete an artifact",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the artifact to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Artifact successfully deleted"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have required privileges"
          },
          "404": {
            "description": "Artifact not found"
          }
        }
      }
    },
    "/api/v1/museums/{museumId}/artifacts": {
      "get": {
        "tags": ["Artifact"],
        "summary": "Get all artifacts for a specific museum",
        "parameters": [
          {
            "name": "museumId",
            "in": "path",
            "description": "The unique identifier of the museum",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "IsActive",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Search",
            "in": "query",
            "schema": {
              "maxLength": 100,
              "type": "string"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of artifacts"
          },
          "404": {
            "description": "Museum not found"
          }
        }
      },
      "post": {
        "tags": ["Artifact"],
        "summary": "Create a new artifact for a museum",
        "parameters": [
          {
            "name": "museumId",
            "in": "path",
            "description": "The unique identifier of the museum",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The artifact creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArtifactCreateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ArtifactCreateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ArtifactCreateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Returns the newly created artifact"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have required privileges"
          },
          "404": {
            "description": "Museum not found"
          }
        }
      }
    },
    "/api/v1/artifacts/{id}/activate": {
      "patch": {
        "tags": ["Artifact"],
        "summary": "Activate an artifact",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the artifact to activate",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the activated artifact"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have required privileges"
          },
          "404": {
            "description": "Artifact not found"
          }
        }
      }
    },
    "/api/v1/artifacts/{id}/deactivate": {
      "patch": {
        "tags": ["Artifact"],
        "summary": "Deactivate an artifact",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the artifact to deactivate",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the deactivated artifact"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have required privileges"
          },
          "404": {
            "description": "Artifact not found"
          }
        }
      }
    },
    "/api/v1/artifacts/filter-sort": {
      "get": {
        "tags": ["Artifact"],
        "summary": "Get artifacts by filter and sort",
        "parameters": [
          {
            "name": "Rating",
            "in": "query",
            "schema": {
              "maximum": 5,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IsActive",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "MuseumId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "IsDescending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of artifacts"
          },
          "400": {
            "description": "Invalid filter or sort parameters"
          }
        }
      }
    },
    "/api/v1/artifacts/{id}/feedback": {
      "post": {
        "tags": ["Artifact"],
        "summary": "Feedback an artifact",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the artifact",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The comment of the rating",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RatingCreateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RatingCreateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RatingCreateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated artifact"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have required privileges"
          },
          "404": {
            "description": "Artifact not found"
          }
        }
      }
    },
    "/api/v1/auth/google/login": {
      "get": {
        "tags": ["Auth"],
        "parameters": [
          {
            "name": "redirect",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/auth/google/callback": {
      "get": {
        "tags": ["Auth"],
        "parameters": [
          {
            "name": "redirect",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/auth/register": {
      "post": {
        "tags": ["Auth"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterReq"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterReq"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "tags": ["Auth"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginReq"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginReq"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/auth/verify-token": {
      "get": {
        "tags": ["Auth"],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/auth/refresh": {
      "post": {
        "tags": ["Auth"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshReq"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshReq"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/auth/forgot-password/request": {
      "post": {
        "tags": ["Auth"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestOTP"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestOTP"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RequestOTP"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/auth/forgot-password/verify": {
      "post": {
        "tags": ["Auth"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyOTPChangePassword"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyOTPChangePassword"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyOTPChangePassword"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/categories": {
      "get": {
        "tags": ["Category"],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": ["Category"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryCreateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryCreateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryCreateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/categories/{id}": {
      "get": {
        "tags": ["Category"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": ["Category"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": ["Category"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/events": {
      "get": {
        "tags": ["Event"],
        "summary": "Get a paginated list of active events",
        "parameters": [
          {
            "name": "MuseumId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Search",
            "in": "query",
            "schema": {
              "maxLength": 1000,
              "type": "string"
            }
          },
          {
            "name": "Location",
            "in": "query",
            "schema": {
              "maxLength": 100,
              "type": "string"
            }
          },
          {
            "name": "EventType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EventTypeEnum"
            }
          },
          {
            "name": "StartTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of events"
          }
        }
      }
    },
    "/api/v1/events/{id}": {
      "get": {
        "tags": ["Event"],
        "summary": "Get an event by its unique identifier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the event",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested event"
          },
          "404": {
            "description": "Event not found"
          }
        }
      },
      "put": {
        "tags": ["Event"],
        "summary": "Update an event as an organizer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the event to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated event data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EventUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EventUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated event"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have organizer privileges"
          },
          "404": {
            "description": "Event not found"
          }
        }
      },
      "delete": {
        "tags": ["Event"],
        "summary": "Delete an event as an organizer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the event to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Event successfully deleted"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have organizer privileges"
          },
          "404": {
            "description": "Event not found"
          }
        }
      }
    },
    "/api/v1/events/admin": {
      "get": {
        "tags": ["Event"],
        "summary": "Get a paginated list of all events (including inactive) for admin purposes",
        "parameters": [
          {
            "name": "StartBookingDeadline",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndBookingDeadline",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Status",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EventStatusEnum"
            }
          },
          {
            "name": "MuseumId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Search",
            "in": "query",
            "schema": {
              "maxLength": 1000,
              "type": "string"
            }
          },
          {
            "name": "Location",
            "in": "query",
            "schema": {
              "maxLength": 100,
              "type": "string"
            }
          },
          {
            "name": "EventType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EventTypeEnum"
            }
          },
          {
            "name": "StartTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of events"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have admin privileges"
          }
        }
      }
    },
    "/api/v1/museums/{museumId}/events": {
      "get": {
        "tags": ["Event"],
        "summary": "Get all events for a specific museum",
        "parameters": [
          {
            "name": "museumId",
            "in": "path",
            "description": "The unique identifier of the museum",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "StartBookingDeadline",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndBookingDeadline",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Status",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EventStatusEnum"
            }
          },
          {
            "name": "MuseumId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Search",
            "in": "query",
            "schema": {
              "maxLength": 1000,
              "type": "string"
            }
          },
          {
            "name": "Location",
            "in": "query",
            "schema": {
              "maxLength": 100,
              "type": "string"
            }
          },
          {
            "name": "EventType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EventTypeEnum"
            }
          },
          {
            "name": "StartTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of events"
          },
          "404": {
            "description": "Museum not found"
          }
        }
      },
      "post": {
        "tags": ["Event"],
        "summary": "Create a new event directly as an admin",
        "parameters": [
          {
            "name": "museumId",
            "in": "path",
            "description": "The unique identifier of the museum",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The event creation data with admin privileges",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventCreateAdminDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EventCreateAdminDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EventCreateAdminDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Returns the newly created event"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have admin privileges"
          },
          "404": {
            "description": "Museum not found"
          }
        }
      }
    },
    "/api/v1/museums/{museumId}/events/request": {
      "post": {
        "tags": ["Event"],
        "summary": "Create a draft event request for a museum",
        "parameters": [
          {
            "name": "museumId",
            "in": "path",
            "description": "The unique identifier of the museum",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The event creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventCreateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EventCreateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EventCreateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Returns the newly created draft event"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have organizer privileges"
          },
          "404": {
            "description": "Museum not found"
          }
        }
      }
    },
    "/api/v1/events/{id}/evaluate": {
      "patch": {
        "tags": ["Event"],
        "summary": "Evaluate an event request (approve or reject)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the event",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "isApproved",
            "in": "query",
            "description": "Whether to approve or reject the event",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the evaluated event"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have admin privileges"
          },
          "404": {
            "description": "Event not found"
          }
        }
      }
    },
    "/api/v1/events/{id}/cancel": {
      "patch": {
        "tags": ["Event"],
        "summary": "Cancel an event",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the event to cancel",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the cancelled event"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have admin privileges"
          },
          "404": {
            "description": "Event not found"
          }
        }
      }
    },
    "/api/v1/events/{id}/admin": {
      "put": {
        "tags": ["Event"],
        "summary": "Update an event as an admin",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the event to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated event data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EventUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EventUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated event"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have admin privileges"
          },
          "404": {
            "description": "Event not found"
          }
        }
      },
      "delete": {
        "tags": ["Event"],
        "summary": "Delete an event as an admin",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the event to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Event successfully deleted"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have admin privileges"
          },
          "404": {
            "description": "Event not found"
          }
        }
      }
    },
    "/api/v1/events/{id}/submit": {
      "patch": {
        "tags": ["Event"],
        "summary": "Submit an event for approval",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the event to submit",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the submitted event"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have organizer privileges"
          },
          "404": {
            "description": "Event not found"
          }
        }
      }
    },
    "/api/v1/events/assigned": {
      "get": {
        "tags": ["Event"],
        "summary": "Get all events assigned to the current organizer",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Optional status filter for the events",
            "schema": {
              "$ref": "#/components/schemas/EventStatusEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of events"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have organizer privileges"
          }
        }
      }
    },
    "/api/v1/events/{id}/add-artifacts": {
      "put": {
        "tags": ["Event"],
        "summary": "Add artifacts to an event (same museum)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the event",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Collection of artifact IDs to add",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated event"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have admin privileges"
          },
          "404": {
            "description": "Event or artifacts not found"
          }
        }
      }
    },
    "/api/v1/events/{id}/remove-artifacts": {
      "put": {
        "tags": ["Event"],
        "summary": "Remove artifacts from an event (same museum)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the event",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Collection of artifact IDs to remove",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated event"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have admin privileges"
          },
          "404": {
            "description": "Event or artifacts not found"
          }
        }
      }
    },
    "/api/v1/events/{id}/add-tour-onlines": {
      "put": {
        "tags": ["Event"],
        "summary": "Add online tours to an event (same museum)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the event",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Collection of online tour IDs to add",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated event"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have admin privileges"
          },
          "404": {
            "description": "Event or online tours not found"
          }
        }
      }
    },
    "/api/v1/events/{id}/remove-tour-onlines": {
      "put": {
        "tags": ["Event"],
        "summary": "Remove online tours from an event (same museum)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the event",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Collection of online tour IDs to remove",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated event"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have admin privileges"
          },
          "404": {
            "description": "Event or online tours not found"
          }
        }
      }
    },
    "/api/v1/events/{id}/add-tour-guides": {
      "put": {
        "tags": ["Event"],
        "summary": "Add tour guides to an event (same museum)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the event",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Collection of tour guide IDs to add",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated event"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have admin privileges"
          },
          "404": {
            "description": "Event or tour guides not found"
          }
        }
      }
    },
    "/api/v1/events/{id}/remove-tour-guides": {
      "put": {
        "tags": ["Event"],
        "summary": "Remove tour guides from an event (same museum)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the event",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Collection of tour guide IDs to remove",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated event"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have admin privileges"
          },
          "404": {
            "description": "Event or tour guides not found"
          }
        }
      }
    },
    "/api/v1/events/{id}/feedback": {
      "patch": {
        "tags": ["Event"],
        "summary": "Feedback an event",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the event",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "The comment of the event",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the rated event"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "404": {
            "description": "Event not found"
          }
        }
      }
    },
    "/api/v1/events/created-by/{userId}": {
      "get": {
        "tags": ["Event"],
        "summary": "Get all events created by the current user",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of events"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          }
        }
      }
    },
    "/api/v1/event-participants": {
      "get": {
        "tags": ["EventParticipant"],
        "summary": "Get all event participants",
        "responses": {
          "200": {
            "description": "Returns the list of event participants"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          }
        }
      },
      "post": {
        "tags": ["EventParticipant"],
        "summary": "Add a new participant to an event",
        "requestBody": {
          "description": "The event participant data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventParticipantCreateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EventParticipantCreateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EventParticipantCreateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Returns the newly created event participant"
          },
          "400": {
            "description": "Invalid input data or user already participating"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "404": {
            "description": "Event or user not found"
          }
        }
      }
    },
    "/api/v1/event-participants/{id}": {
      "get": {
        "tags": ["EventParticipant"],
        "summary": "Get an event participant by its unique identifier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the event participant",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested event participant"
          },
          "404": {
            "description": "Event participant not found"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          }
        }
      },
      "put": {
        "tags": ["EventParticipant"],
        "summary": "Update an existing event participant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the event participant",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated event participant data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventParticipantUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EventParticipantUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EventParticipantUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated event participant"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "404": {
            "description": "Event participant not found"
          }
        }
      },
      "delete": {
        "tags": ["EventParticipant"],
        "summary": "Remove a participant from an event",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the event participant",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event participant removed successfully"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "404": {
            "description": "Event participant not found"
          }
        }
      }
    },
    "/api/v1/event-participants/event/{eventId}": {
      "get": {
        "tags": ["EventParticipant"],
        "summary": "Get all participants for a specific event",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The unique identifier of the event",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of event participants"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          }
        }
      }
    },
    "/api/v1/event-participants/user/{userId}": {
      "get": {
        "tags": ["EventParticipant"],
        "summary": "Get all events a user is participating in",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of events"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          }
        }
      }
    },
    "/api/v1/event-participants/event/{eventId}/user/{userId}": {
      "get": {
        "tags": ["EventParticipant"],
        "summary": "Check if a specific user is participating in a specific event",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The unique identifier of the event",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the event participant"
          },
          "404": {
            "description": "Event participant not found"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          }
        }
      }
    },
    "/api/v1/event-participants/client": {
      "post": {
        "tags": ["EventParticipant"],
        "summary": "Add a new participant to an event",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "The unique identifier of the user",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "eventId",
            "in": "query",
            "description": "The unique identifier of the event",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Returns the newly created event participant"
          },
          "400": {
            "description": "Invalid input data or user already participating"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "404": {
            "description": "Event or user not found"
          }
        }
      }
    },
    "/api/v1/historical-periods": {
      "get": {
        "tags": ["HistoricalPeriod"],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": ["HistoricalPeriod"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HistoricalPeriodCreateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/HistoricalPeriodCreateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/HistoricalPeriodCreateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/historical-periods/{id}": {
      "get": {
        "tags": ["HistoricalPeriod"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": ["HistoricalPeriod"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HistoricalPeriodUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/HistoricalPeriodUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/HistoricalPeriodUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": ["HistoricalPeriod"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/historical-periods/search": {
      "get": {
        "tags": ["HistoricalPeriod"],
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/messaging/conversations": {
      "get": {
        "tags": ["Messaging"],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": ["Messaging"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConversation"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConversation"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConversation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/messaging/conversations/{conversationId}/messages": {
      "get": {
        "tags": ["Messaging"],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "ConversationId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/messaging/messages": {
      "post": {
        "tags": ["Messaging"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessage"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessage"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/messaging/conversations/{conversationId}/last-seen": {
      "put": {
        "tags": ["Messaging"],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/messaging/conversations/{conversationId}/join": {
      "post": {
        "tags": ["Messaging"],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/messaging/notifications/system": {
      "post": {
        "tags": ["Messaging"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNotificationDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNotificationDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNotificationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/messaging/notifications": {
      "get": {
        "tags": ["Messaging"],
        "parameters": [
          {
            "name": "IsRead",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/messaging/notifications/read": {
      "put": {
        "tags": ["Messaging"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationUpdateReadStatusReq"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationUpdateReadStatusReq"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationUpdateReadStatusReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/messaging/notifications/test": {
      "post": {
        "tags": ["Messaging"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNotificationDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNotificationDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNotificationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/museums": {
      "get": {
        "tags": ["Museum"],
        "parameters": [
          {
            "name": "Search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Status",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MuseumStatusEnum"
              }
            }
          },
          {
            "name": "CategoryId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": ["Museum"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MuseumCreateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MuseumCreateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MuseumCreateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/museums/admin": {
      "get": {
        "tags": ["Museum"],
        "parameters": [
          {
            "name": "Search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Status",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MuseumStatusEnum"
              }
            }
          },
          {
            "name": "CategoryId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/museums/user": {
      "get": {
        "tags": ["Museum"],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/museums/{id}": {
      "get": {
        "tags": ["Museum"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": ["Museum"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MuseumUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MuseumUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MuseumUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/museums/reindex/{id}": {
      "post": {
        "tags": ["Museum"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/museums/requests": {
      "get": {
        "tags": ["Museum"],
        "parameters": [
          {
            "name": "Search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Status",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RequestStatusEnum"
              }
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": ["Museum"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MuseumRequestCreateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MuseumRequestCreateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MuseumRequestCreateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/museums/requests/user": {
      "get": {
        "tags": ["Museum"],
        "parameters": [
          {
            "name": "Search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Status",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RequestStatusEnum"
              }
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/museums/requests/{id}": {
      "get": {
        "tags": ["Museum"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": ["Museum"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MuseumRequestUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MuseumRequestUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MuseumRequestUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": ["Museum"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/museums/requests/{id}/approve": {
      "put": {
        "tags": ["Museum"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/museums/requests/{id}/reject": {
      "put": {
        "tags": ["Museum"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/museums/policies/museum/{museumId}": {
      "get": {
        "tags": ["Museum"],
        "parameters": [
          {
            "name": "museumId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/museums/policies/{id}": {
      "get": {
        "tags": ["Museum"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": ["Museum"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MuseumPolicyUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MuseumPolicyUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MuseumPolicyUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": ["Museum"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/museums/policies": {
      "post": {
        "tags": ["Museum"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MuseumPolicyCreateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MuseumPolicyCreateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MuseumPolicyCreateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/museums/policies/bulk": {
      "post": {
        "tags": ["Museum"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MuseumPolicyBulkRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MuseumPolicyBulkRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MuseumPolicyBulkRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/museums/{id}/feedback": {
      "patch": {
        "tags": ["Museum"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RatingCreateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RatingCreateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RatingCreateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/orders": {
      "post": {
        "tags": ["Order"],
        "summary": "Creates a new order for events, tours, or subscriptions",
        "requestBody": {
          "description": "Order creation request containing total amount, order type, metadata, and item IDs",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderReq"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderReq"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order created successfully with payment information"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing access token"
          },
          "400": {
            "description": "Bad request - Invalid order data"
          }
        }
      },
      "get": {
        "tags": ["Order"],
        "summary": "Retrieves all orders for the authenticated user with optional filtering and pagination",
        "parameters": [
          {
            "name": "Search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OrderType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderTypeEnum"
            }
          },
          {
            "name": "Status",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PaymentStatusEnum"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Orders retrieved successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing access token"
          }
        }
      }
    },
    "/api/v1/orders/{id}": {
      "get": {
        "tags": ["Order"],
        "summary": "Retrieves a specific order by its unique identifier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the order",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order details retrieved successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing access token"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/api/v1/orders/admin": {
      "get": {
        "tags": ["Order"],
        "summary": "Retrieves all orders in the system for administrative purposes",
        "parameters": [
          {
            "name": "Search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OrderType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderTypeEnum"
            }
          },
          {
            "name": "Status",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PaymentStatusEnum"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Orders retrieved successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing access token"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions for admin access"
          }
        }
      }
    },
    "/api/v1/orders/payos-webhook": {
      "post": {
        "tags": ["Order"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookType"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookType"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/orders/code/{orderCode}": {
      "get": {
        "tags": ["Order"],
        "parameters": [
          {
            "name": "orderCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/ping": {
      "get": {
        "tags": ["Ping"],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/representation-materials": {
      "get": {
        "tags": ["RepresentationMaterial"],
        "summary": "Get all representation materials",
        "responses": {
          "200": {
            "description": "Returns the list of representation materials"
          }
        }
      }
    },
    "/api/v1/representation-materials/{id}": {
      "get": {
        "tags": ["RepresentationMaterial"],
        "summary": "Get a representation material by its unique identifier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the representation material",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested representation material"
          },
          "404": {
            "description": "Representation material not found"
          }
        }
      },
      "put": {
        "tags": ["RepresentationMaterial"],
        "summary": "Update an existing representation material",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the representation material to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The representation material update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepresentationMaterialUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RepresentationMaterialUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RepresentationMaterialUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated representation material"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "404": {
            "description": "Representation material not found"
          }
        }
      },
      "delete": {
        "tags": ["RepresentationMaterial"],
        "summary": "Delete a representation material",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the representation material to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Representation material deleted successfully"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "404": {
            "description": "Representation material not found"
          }
        }
      }
    },
    "/api/v1/events/{eventId}/representation-materials": {
      "post": {
        "tags": ["RepresentationMaterial"],
        "summary": "Create a new representation material for an event",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The unique identifier of the event",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The representation material creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepresentationMaterialCreateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RepresentationMaterialCreateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RepresentationMaterialCreateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Returns the newly created representation material"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "404": {
            "description": "Event not found"
          }
        }
      }
    },
    "/api/v1/rolebase/roles": {
      "get": {
        "tags": ["Rolebase"],
        "parameters": [
          {
            "name": "Search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": ["Rolebase"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleCreateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleCreateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RoleCreateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/rolebase/roles/{id}": {
      "get": {
        "tags": ["Rolebase"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": ["Rolebase"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RoleUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/rolebase/roles/{id}/permissions": {
      "put": {
        "tags": ["Rolebase"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RolePermissionUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RolePermissionUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RolePermissionUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/rolebase/permissions": {
      "get": {
        "tags": ["Rolebase"],
        "parameters": [
          {
            "name": "Search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": ["Rolebase"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionCreateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionCreateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionCreateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/rolebase/permissions/{id}": {
      "get": {
        "tags": ["Rolebase"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": ["Rolebase"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": ["Rolebase"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/events/{eventId}/rooms": {
      "post": {
        "tags": ["Room"],
        "summary": "Creates a new room.",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The unique identifier of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The room creation data transfer object containing room details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoomCreateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RoomCreateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RoomCreateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the created room information"
          },
          "400": {
            "description": "If the dto is null or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "If the associated event does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "If there was an internal server error"
          }
        }
      },
      "get": {
        "tags": ["Room"],
        "summary": "Retrieves a room by its event id.",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The unique identifier of the event.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/v1/rooms/{id}": {
      "get": {
        "tags": ["Room"],
        "summary": "Retrieves a room by its unique identifier.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the room to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the room information"
          },
          "404": {
            "description": "If the room with the specified id does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "If there was an internal server error"
          }
        }
      },
      "put": {
        "tags": ["Room"],
        "summary": "Updates an existing room with new information.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the room to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The room update data transfer object containing updated room details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoomUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RoomUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RoomUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns success message"
          },
          "400": {
            "description": "If the dto is null or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "If the room with the specified id does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "If there was an internal server error"
          }
        }
      },
      "delete": {
        "tags": ["Room"],
        "summary": "Deletes a room by its unique identifier.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the room to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns success message"
          },
          "404": {
            "description": "If the room with the specified id does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "If there was an internal server error"
          }
        }
      }
    },
    "/api/v1/rooms/{id}/metadata": {
      "put": {
        "tags": ["Room"],
        "summary": "Updates the metadata of an existing room.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the room to update metadata for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The room metadata update data transfer object containing updated metadata.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoomUpdateMetadataDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RoomUpdateMetadataDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RoomUpdateMetadataDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns success message"
          },
          "400": {
            "description": "If the dto is null or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "If the room with the specified id does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "If there was an internal server error"
          }
        }
      }
    },
    "/api/v1/search": {
      "get": {
        "tags": ["Search"],
        "parameters": [
          {
            "name": "Search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Location",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "RadiusKm",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "Latitude",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "Longitude",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "Status",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/search/reindex": {
      "post": {
        "tags": ["Search"],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/search/semantic": {
      "post": {
        "tags": ["Search"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SemanticSearchQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SemanticSearchQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SemanticSearchQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/search/embedding": {
      "post": {
        "tags": ["Search"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/search/similar/{itemId}": {
      "get": {
        "tags": ["Search"],
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "itemType",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/search/semantic/reindex": {
      "post": {
        "tags": ["Search"],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/search/semantic/index/{itemType}/{itemId}": {
      "post": {
        "tags": ["Search"],
        "parameters": [
          {
            "name": "itemType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/search/index/{id}": {
      "delete": {
        "tags": ["Search"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/subscriptions/plans": {
      "get": {
        "tags": ["Subscription"],
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MinPrice",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "MaxPrice",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "MinDurationDays",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "MaxDurationDays",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IsActive",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortOrder",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": ["Subscription"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlanCreateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PlanCreateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PlanCreateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/subscriptions/plans/admin": {
      "get": {
        "tags": ["Subscription"],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/subscriptions/plans/{id}": {
      "get": {
        "tags": ["Subscription"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": ["Subscription"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlanUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PlanUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PlanUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": ["Subscription"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/tour-contents": {
      "get": {
        "tags": ["TourContent"],
        "summary": "Get a paginated list of active tour contents",
        "parameters": [
          {
            "name": "TourId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of tour contents"
          }
        }
      }
    },
    "/api/v1/tour-contents/admin": {
      "get": {
        "tags": ["TourContent"],
        "summary": "Get a paginated list of all tour contents (including inactive) for admin purposes",
        "parameters": [
          {
            "name": "IsActive",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "TourId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of tour contents"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have admin privileges"
          }
        }
      }
    },
    "/api/v1/tour-contents/{id}": {
      "get": {
        "tags": ["TourContent"],
        "summary": "Get a tour content by its unique identifier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the tour content",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested tour content"
          },
          "404": {
            "description": "Tour content not found"
          }
        }
      },
      "put": {
        "tags": ["TourContent"],
        "summary": "Update an existing tour content",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the tour content to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated tour content data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TourContentUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TourContentUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TourContentUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated tour content"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have required privileges"
          },
          "404": {
            "description": "Tour content not found"
          }
        }
      },
      "delete": {
        "tags": ["TourContent"],
        "summary": "Delete a tour content",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the tour content to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Tour content successfully deleted"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have required privileges"
          },
          "404": {
            "description": "Tour content not found"
          }
        }
      }
    },
    "/api/v1/tour-onlines/{tourOnlineId}/contents": {
      "post": {
        "tags": ["TourContent"],
        "summary": "Create a new tour content",
        "parameters": [
          {
            "name": "tourOnlineId",
            "in": "path",
            "description": "The unique identifier of the tour online",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The tour content creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TourContentCreateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TourContentCreateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TourContentCreateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Returns the newly created tour content"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have required privileges"
          }
        }
      },
      "get": {
        "tags": ["TourContent"],
        "parameters": [
          {
            "name": "tourOnlineId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "IsActive",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "TourId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/tour-contents/{id}/activate": {
      "patch": {
        "tags": ["TourContent"],
        "summary": "Activate a tour content",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the tour content to activate",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the activated tour content"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have required privileges"
          },
          "404": {
            "description": "Tour content not found"
          }
        }
      }
    },
    "/api/v1/tour-contents/{id}/deactivate": {
      "patch": {
        "tags": ["TourContent"],
        "summary": "Deactivate a tour content",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the tour content to deactivate",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the deactivated tour content"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have required privileges"
          },
          "404": {
            "description": "Tour content not found"
          }
        }
      }
    },
    "/api/v1/tour-guides": {
      "get": {
        "tags": ["TourGuide"],
        "summary": "Gets all tour guides based on the provided query parameters",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Bio",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IsAvailable",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "MuseumId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "EventId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of tour guides"
          }
        }
      }
    },
    "/api/v1/tour-guides/{id}": {
      "get": {
        "tags": ["TourGuide"],
        "summary": "Gets a specific tour guide by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the tour guide",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested tour guide"
          },
          "404": {
            "description": "If the tour guide is not found"
          }
        }
      },
      "put": {
        "tags": ["TourGuide"],
        "summary": "Updates an existing tour guide",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the tour guide to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated tour guide data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TourGuideUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TourGuideUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TourGuideUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated tour guide"
          },
          "404": {
            "description": "If the tour guide is not found"
          }
        }
      },
      "delete": {
        "tags": ["TourGuide"],
        "summary": "Deletes a tour guide",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the tour guide to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "If the tour guide was successfully deleted"
          },
          "404": {
            "description": "If the tour guide is not found"
          }
        }
      }
    },
    "/api/v1/museums/{museumId}/tour-guides": {
      "post": {
        "tags": ["TourGuide"],
        "summary": "Creates a new tour guide for a specific museum",
        "parameters": [
          {
            "name": "museumId",
            "in": "path",
            "description": "The ID of the museum",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The tour guide creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TourGuideCreateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TourGuideCreateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TourGuideCreateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Returns the newly created tour guide"
          },
          "400": {
            "description": "If the request data is invalid"
          }
        }
      },
      "get": {
        "tags": ["TourGuide"],
        "summary": "Gets all tour guides associated with a specific museum",
        "parameters": [
          {
            "name": "museumId",
            "in": "path",
            "description": "The ID of the museum",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Bio",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IsAvailable",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "MuseumId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "EventId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of tour guides"
          }
        }
      }
    },
    "/api/v1/events/{eventId}/tour-guides": {
      "get": {
        "tags": ["TourGuide"],
        "summary": "Gets all tour guides associated with a specific event",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Bio",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IsAvailable",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "MuseumId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "EventId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of tour guides"
          }
        }
      }
    },
    "/api/v1/users/{userId}/tour-guides": {
      "get": {
        "tags": ["TourGuide"],
        "summary": "Gets all tour guides associated with a specific user",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Bio",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IsAvailable",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "MuseumId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "EventId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of tour guides"
          }
        }
      }
    },
    "/api/v1/tour-guides/{id}/available": {
      "patch": {
        "tags": ["TourGuide"],
        "summary": "Updates the availability of a tour guide",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the tour guide",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "isAvailable",
            "in": "query",
            "description": "The new availability status",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated tour guide"
          }
        }
      }
    },
    "/api/v1/tour-onlines": {
      "get": {
        "tags": ["TourOnline"],
        "summary": "Get a paginated list of active online tours",
        "parameters": [
          {
            "name": "MuseumId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of online tours"
          },
          "400": {
            "description": "Invalid query parameters"
          }
        }
      }
    },
    "/api/v1/tour-onlines/{id}": {
      "get": {
        "tags": ["TourOnline"],
        "summary": "Get an online tour by its unique identifier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the online tour",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested online tour"
          },
          "404": {
            "description": "Online tour not found"
          }
        }
      },
      "put": {
        "tags": ["TourOnline"],
        "summary": "Update an existing online tour",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the online tour to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated online tour data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TourOnlineUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TourOnlineUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TourOnlineUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated online tour"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have admin privileges"
          },
          "404": {
            "description": "Online tour not found"
          }
        }
      },
      "delete": {
        "tags": ["TourOnline"],
        "summary": "Delete an online tour",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the online tour to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Online tour successfully deleted"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have admin privileges"
          },
          "404": {
            "description": "Online tour not found"
          }
        }
      }
    },
    "/api/v1/museums/{museumId}/tour-onlines": {
      "get": {
        "tags": ["TourOnline"],
        "summary": "Get all online tours for a specific museum",
        "parameters": [
          {
            "name": "museumId",
            "in": "path",
            "description": "The unique identifier of the museum",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "IsActive",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "MuseumId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of online tours"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have admin privileges"
          },
          "404": {
            "description": "Museum not found"
          }
        }
      },
      "post": {
        "tags": ["TourOnline"],
        "summary": "Create a new online tour for a museum",
        "parameters": [
          {
            "name": "museumId",
            "in": "path",
            "description": "The unique identifier of the museum to create the tour for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The online tour creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TourOnlineCreateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TourOnlineCreateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TourOnlineCreateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Returns the newly created online tour"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have admin privileges"
          },
          "404": {
            "description": "Museum not found"
          }
        }
      }
    },
    "/api/v1/tour-onlines/{id}/activate": {
      "patch": {
        "tags": ["TourOnline"],
        "summary": "Activate an online tour",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the online tour to activate",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the activated online tour"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have admin privileges"
          },
          "404": {
            "description": "Online tour not found"
          }
        }
      }
    },
    "/api/v1/tour-onlines/{id}/deactivate": {
      "patch": {
        "tags": ["TourOnline"],
        "summary": "Deactivate an online tour",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the online tour to deactivate",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the deactivated online tour"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have admin privileges"
          },
          "404": {
            "description": "Online tour not found"
          }
        }
      }
    },
    "/api/v1/tour-onlines/admin": {
      "get": {
        "tags": ["TourOnline"],
        "summary": "Get a paginated list of all online tours (including inactive) for admin purposes",
        "parameters": [
          {
            "name": "IsActive",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "MuseumId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of online tours"
          },
          "400": {
            "description": "Invalid query parameters"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have admin privileges"
          }
        }
      }
    },
    "/api/v1/tour-onlines/{id}/add-tour-contents": {
      "put": {
        "tags": ["TourOnline"],
        "summary": "Add tour contents to an online tour",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the online tour",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The unique identifiers of the tour contents to add",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/tour-onlines/{id}/remove-tour-contents": {
      "put": {
        "tags": ["TourOnline"],
        "summary": "Remove tour contents from an online tour",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the online tour",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The unique identifiers of the tour contents to add",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/tour-onlines/{id}/feedback": {
      "patch": {
        "tags": ["TourOnline"],
        "summary": "Feedback an online tour",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the online tour",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The comment of the rating",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeedbackCreateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FeedbackCreateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FeedbackCreateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated online tour"
          },
          "401": {
            "description": "Unauthorized - User is not authenticated"
          },
          "403": {
            "description": "Forbidden - User does not have required privileges"
          },
          "404": {
            "description": "Online tour not found"
          }
        }
      }
    },
    "/api/v1/upload": {
      "post": {
        "tags": ["Upload"],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "ContentType": {
                    "type": "string"
                  },
                  "ContentDisposition": {
                    "type": "string"
                  },
                  "Headers": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "Length": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "Name": {
                    "type": "string"
                  },
                  "FileName": {
                    "type": "string"
                  },
                  "type": {
                    "$ref": "#/components/schemas/MediaTypeEnum"
                  }
                }
              },
              "encoding": {
                "ContentType": {
                  "style": "form"
                },
                "ContentDisposition": {
                  "style": "form"
                },
                "Headers": {
                  "style": "form"
                },
                "Length": {
                  "style": "form"
                },
                "Name": {
                  "style": "form"
                },
                "FileName": {
                  "style": "form"
                },
                "type": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/users": {
      "get": {
        "tags": ["User"],
        "parameters": [
          {
            "name": "Search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/users/admin": {
      "post": {
        "tags": ["User"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/users/admin/{id}": {
      "put": {
        "tags": ["User"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/users/profile": {
      "get": {
        "tags": ["User"],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": ["User"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileReq"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileReq"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/users/profile/change-password": {
      "put": {
        "tags": ["User"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePassword"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePassword"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePassword"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/users/privileges": {
      "get": {
        "tags": ["User"],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/users/admin/{userId}/roles": {
      "get": {
        "tags": ["User"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/users/roles": {
      "post": {
        "tags": ["User"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRoleFormDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRoleFormDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserRoleFormDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": ["User"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRoleFormDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRoleFormDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserRoleFormDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/users/museum/{museumId}": {
      "get": {
        "tags": ["User"],
        "parameters": [
          {
            "name": "Search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MuseumId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Statuses",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UserStatusEnum"
              }
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "museumId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ArticleCreateDto": {
        "required": ["content", "museumId", "title"],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string"
          },
          "content": {
            "minLength": 1,
            "type": "string"
          },
          "museumId": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "$ref": "#/components/schemas/ArticleStatusEnum"
          },
          "dataEntityType": {
            "$ref": "#/components/schemas/DataEntityType"
          },
          "entityId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ArticleStatusEnum": {
        "enum": ["Draft", "Pending", "Published", "Rejected", "Archived"],
        "type": "string"
      },
      "ArticleUpdateDto": {
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/ArticleStatusEnum"
          },
          "dataEntityType": {
            "$ref": "#/components/schemas/DataEntityType"
          },
          "entityId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ArtifactCreateDto": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "historicalPeriod": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "maxLength": 1000,
            "type": "string",
            "nullable": true
          },
          "model3DUrl": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ArtifactUpdateDto": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "historicalPeriod": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "model3DUrl": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthTypeEnum": {
        "enum": ["Email", "Google", "Firebase", "Phone", "Facebook"],
        "type": "string"
      },
      "CategoryCreateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CategoryUpdateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangePassword": {
        "type": "object",
        "properties": {
          "oldPassword": {
            "type": "string",
            "nullable": true
          },
          "newPassword": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChatReq": {
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string",
            "nullable": true
          },
          "isVector": {
            "type": "boolean",
            "nullable": true
          },
          "entityType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateConversation": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "isBot": {
            "type": "boolean"
          },
          "metadata": {
            "nullable": true
          },
          "chatWithUserId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "CreateMessage": {
        "type": "object",
        "properties": {
          "conversationId": {
            "type": "string",
            "format": "uuid"
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateNotificationDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "target": {
            "$ref": "#/components/schemas/NotificationTargetEnum"
          },
          "metadata": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateOrderReq": {
        "required": ["cancelUrl", "returnUrl"],
        "type": "object",
        "properties": {
          "orderType": {
            "$ref": "#/components/schemas/OrderTypeEnum"
          },
          "metadata": {
            "nullable": true
          },
          "itemIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "cancelUrl": {
            "minLength": 1,
            "type": "string"
          },
          "returnUrl": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "DataEntityType": {
        "enum": ["Artifact", "Event", "Ticket", "Museum", "TourOnline"],
        "type": "string"
      },
      "EmbeddingRequestDto": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "entityId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EventCreateAdminDto": {
        "required": ["eventType", "status", "title"],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "nullable": true
          },
          "eventType": {
            "$ref": "#/components/schemas/EventTypeEnum"
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "location": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "capacity": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "availableSlots": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "bookingDeadline": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/EventStatusEnum"
          }
        },
        "additionalProperties": false
      },
      "EventCreateDto": {
        "required": [
          "availableSlots",
          "bookingDeadline",
          "capacity",
          "description",
          "endTime",
          "eventType",
          "location",
          "price",
          "startTime",
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "maxLength": 1000,
            "minLength": 1,
            "type": "string"
          },
          "eventType": {
            "$ref": "#/components/schemas/EventTypeEnum"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "location": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "capacity": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "availableSlots": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "bookingDeadline": {
            "type": "string",
            "format": "date-time"
          },
          "price": {
            "minimum": 0,
            "type": "number",
            "format": "float"
          },
          "metadata": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EventParticipantCreateDto": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "role": {
            "$ref": "#/components/schemas/ParticipantRoleEnum"
          }
        },
        "additionalProperties": false
      },
      "EventParticipantUpdateDto": {
        "type": "object",
        "properties": {
          "role": {
            "$ref": "#/components/schemas/ParticipantRoleEnum"
          },
          "status": {
            "$ref": "#/components/schemas/ParticipantStatusEnum"
          }
        },
        "additionalProperties": false
      },
      "EventStatusEnum": {
        "enum": ["Draft", "Pending", "Published", "Cancelled", "Expired"],
        "type": "string"
      },
      "EventTypeEnum": {
        "enum": ["Exhibition", "Workshop", "Lecture", "SpecialEvent", "HolidayEvent", "Other"],
        "type": "string"
      },
      "EventUpdateDto": {
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "nullable": true
          },
          "eventType": {
            "$ref": "#/components/schemas/EventTypeEnum"
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "location": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "capacity": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "availableSlots": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "bookingDeadline": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "price": {
            "minimum": 0,
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FeedbackCreateDto": {
        "required": ["comment", "rating"],
        "type": "object",
        "properties": {
          "rating": {
            "maximum": 5,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "comment": {
            "maxLength": 1000,
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "HistoricalPeriodCreateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HistoricalPeriodUpdateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LoginReq": {
        "type": "object",
        "properties": {
          "authType": {
            "$ref": "#/components/schemas/AuthTypeEnum"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "redirect": {
            "type": "string",
            "nullable": true
          },
          "firebaseToken": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MediaTypeEnum": {
        "enum": ["Image", "Video", "Document"],
        "type": "string"
      },
      "MuseumCreateDto": {
        "required": ["contactEmail", "contactPhone", "description", "location", "name"],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "minLength": 1,
            "type": "string"
          },
          "location": {
            "minLength": 1,
            "type": "string"
          },
          "contactEmail": {
            "minLength": 1,
            "type": "string",
            "format": "email"
          },
          "contactPhone": {
            "minLength": 1,
            "type": "string",
            "format": "tel"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "metadata": {
            "nullable": true
          },
          "categoryIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MuseumPolicyBulkCreateUpdateDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "policyType": {
            "$ref": "#/components/schemas/PolicyTypeEnum"
          },
          "isActive": {
            "type": "boolean"
          },
          "museumId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "MuseumPolicyBulkRequestDto": {
        "type": "object",
        "properties": {
          "museumId": {
            "type": "string",
            "format": "uuid"
          },
          "policies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MuseumPolicyBulkCreateUpdateDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MuseumPolicyCreateDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "policyType": {
            "$ref": "#/components/schemas/PolicyTypeEnum"
          },
          "zOrder": {
            "type": "integer",
            "format": "int32"
          },
          "museumId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "MuseumPolicyUpdateDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "policyType": {
            "$ref": "#/components/schemas/PolicyTypeEnum"
          },
          "isActive": {
            "type": "boolean",
            "nullable": true
          },
          "zOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MuseumRequestCreateDto": {
        "type": "object",
        "properties": {
          "museumName": {
            "type": "string",
            "nullable": true
          },
          "museumDescription": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "contactEmail": {
            "type": "string",
            "nullable": true
          },
          "contactPhone": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          },
          "categoryIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MuseumRequestUpdateDto": {
        "type": "object",
        "properties": {
          "museumName": {
            "type": "string",
            "nullable": true
          },
          "museumDescription": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "contactEmail": {
            "type": "string",
            "nullable": true
          },
          "contactPhone": {
            "type": "string",
            "nullable": true
          },
          "categoryIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MuseumStatusEnum": {
        "enum": ["NotVerified", "Active", "Inactive", "Deleted"],
        "type": "string"
      },
      "MuseumUpdateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "contactEmail": {
            "type": "string",
            "nullable": true
          },
          "contactPhone": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/MuseumStatusEnum"
          },
          "metadata": {
            "nullable": true
          },
          "categoryIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NotificationTargetEnum": {
        "enum": ["All", "User"],
        "type": "string"
      },
      "NotificationUpdateReadStatusReq": {
        "type": "object",
        "properties": {
          "notificationId": {
            "type": "string",
            "format": "uuid"
          },
          "isRead": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "OrderTypeEnum": {
        "enum": ["Subscription", "Event", "Tour"],
        "type": "string"
      },
      "ParticipantRoleEnum": {
        "enum": ["Attendee", "Organizer", "TourGuide", "Guest"],
        "type": "string"
      },
      "ParticipantStatusEnum": {
        "enum": ["Pending", "Confirmed", "Attended", "Cancelled"],
        "type": "string"
      },
      "PaymentStatusEnum": {
        "enum": ["Pending", "Success", "Canceled"],
        "type": "string"
      },
      "PermissionCreateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "resourceGroup": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PermissionUpdateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "resourceGroup": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PlanCreateDto": {
        "required": ["durationDays", "name", "price"],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "price": {
            "minimum": 0.01,
            "type": "number",
            "format": "double"
          },
          "durationDays": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "maxEvents": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "discountPercent": {
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PlanUpdateDto": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "price": {
            "minimum": 0.01,
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "durationDays": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maxEvents": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "discountPercent": {
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "isActive": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PolicyTypeEnum": {
        "enum": ["TermsOfService", "Visitor", "Tour", "Refund"],
        "type": "string"
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "RatingCreateDto": {
        "required": ["comment", "rating"],
        "type": "object",
        "properties": {
          "rating": {
            "maximum": 5,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "comment": {
            "maxLength": 1000,
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "RefreshReq": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegisterReq": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "avatarUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RepresentationMaterialCreateDto": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "nullable": true
          },
          "zOrder": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "RepresentationMaterialUpdateDto": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "nullable": true
          },
          "zOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RequestOTP": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RequestStatusEnum": {
        "enum": ["Draft", "Pending", "Approved", "Rejected"],
        "type": "string"
      },
      "RoleCreateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RolePermissionUpdateDto": {
        "type": "object",
        "properties": {
          "addList": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "removeList": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RoleUpdateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RoomCreateDto": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/RoomStatusEnum"
          }
        },
        "additionalProperties": false
      },
      "RoomStatusEnum": {
        "enum": ["Active", "Inactive", "PreMeeting"],
        "type": "string"
      },
      "RoomUpdateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/RoomStatusEnum"
          }
        },
        "additionalProperties": false
      },
      "RoomUpdateMetadataDto": {
        "type": "object",
        "properties": {
          "metadata": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SemanticSearchQuery": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "minSimilarity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "includeEmbeddings": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TourContentCreateDto": {
        "required": ["content", "zOrder"],
        "type": "object",
        "properties": {
          "content": {
            "maxLength": 1000,
            "minLength": 1,
            "type": "string"
          },
          "zOrder": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "metadata": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TourContentUpdateDto": {
        "type": "object",
        "properties": {
          "content": {
            "maxLength": 1000,
            "type": "string",
            "nullable": true
          },
          "zOrder": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TourGuideCreateDto": {
        "required": ["bio", "name", "userId"],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "bio": {
            "maxLength": 1000,
            "minLength": 1,
            "type": "string"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "metadata": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TourGuideUpdateDto": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "bio": {
            "maxLength": 1000,
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TourOnlineCreateDto": {
        "required": ["description", "name"],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "maxLength": 1000,
            "minLength": 1,
            "type": "string"
          },
          "metadata": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TourOnlineUpdateDto": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateProfileReq": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "avatarUrl": {
            "type": "string",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserCreateDto": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserRoleFormDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "roleId": {
            "type": "string",
            "format": "uuid"
          },
          "museumId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserStatusEnum": {
        "enum": ["NotVerified", "Active", "Disabled"],
        "type": "string"
      },
      "UserUpdateDto": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "avatarUrl": {
            "type": "string",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VerifyOTPChangePassword": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "otp": {
            "type": "string",
            "nullable": true
          },
          "newPassword": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WebhookData": {
        "type": "object",
        "properties": {
          "orderCode": {
            "type": "integer",
            "format": "int64"
          },
          "amount": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "accountNumber": {
            "type": "string",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "nullable": true
          },
          "transactionDateTime": {
            "type": "string",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "paymentLinkId": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "desc": {
            "type": "string",
            "nullable": true
          },
          "counterAccountBankId": {
            "type": "string",
            "nullable": true
          },
          "counterAccountBankName": {
            "type": "string",
            "nullable": true
          },
          "counterAccountName": {
            "type": "string",
            "nullable": true
          },
          "counterAccountNumber": {
            "type": "string",
            "nullable": true
          },
          "virtualAccountName": {
            "type": "string",
            "nullable": true
          },
          "virtualAccountNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WebhookType": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "desc": {
            "type": "string",
            "nullable": true
          },
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/WebhookData"
          },
          "signature": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "description": "JWT Authorization header using the Bearer scheme",
        "scheme": "bearer"
      }
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ]
}
